/**
 * Project Looking Glass
 *
 * $RCSfile: RotationInterpolatorWrapper.java,v $
 *
 * Copyright (c) 2004, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * $Revision: 1.2 $
 * $Date: 2004-06-23 18:51:48 $
 * $State: Exp $
 */
package org.jdesktop.lg3d.sg.internal.wrapper;


/**
 * RotationInterpolator; A rotation behavior node.
 *
 * @version     1.46, 02/04/01 14:58:57
 */

/**
 * Rotation interpolator behavior.  This class defines a behavior
 * that modifies the rotational component of its target TransformGroup
 * by linearly interpolating between a pair of specified angles
 * (using the value generated by the specified Alpha object).
 * The interpolated angle is used to generate a rotation transform
 * about the local Y-axis of this interpolator.
 */

public interface RotationInterpolatorWrapper extends NodeWrapper {

    /**
      * This method sets the minimumAngle for this interpolator, in
      * radians.
      * @param angle the new minimal angle
      */
    public void setMinimumAngle(float angle) ;

    /**
      * This method retrieves this interpolator's minimumAngle, in 
      * radians.
      * @return the interpolator's minimal angle value
      */
    public float getMinimumAngle() ;

    /**
      * This method sets the maximumAngle for this interpolator, in
      * radians.
      * @param angle the new maximal angle value
      */
    public void setMaximumAngle(float angle) ;

    /**
      * This method retrieves this interpolator's maximumAngle, in 
      * radians.
      * @return the interpolator's maximal angle value
      */
    public float getMaximumAngle() ;
           
    //public void computeTransform(float alphaValue, Transform3D transform) ;
    
    /**
     * Computes the new transform for this interpolator for a given
     * alpha value.
     *
     * @param alphaValue alpha value between 0.0 and 1.0
     * @param transform object that receives the computed transform for
     * the specified alpha value
     *
     * @since Java 3D 1.3
     */
//    public void computeTransform(float alphaValue, Transform3D transform) {
//	double val = (1.0-alphaValue)*minimumAngle + alphaValue*maximumAngle;
//
//	/* construct a Transform3D from:  axis * rotation * axisInverse  */
//	rotation.rotY(val);
//	transform.mul(axis, rotation);
//	transform.mul(transform, axisInverse);
//    }


}
