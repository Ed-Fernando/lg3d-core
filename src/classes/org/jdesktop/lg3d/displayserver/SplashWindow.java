/**
 * Project Looking Glass
 *
 *
 * Copyright (c) 2004, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * $Revision: 1.9 $
 * $Date: 2007-03-22 08:38:18 $
 * $State: Exp $
 *
 *  The Original Code is Java 3D(tm) Fly Through.
 *  The Initial Developer of the Original Code is Paul Byrne.
 *  Portions created by Paul Byrne are Copyright (C) 2002.
 *  All Rights Reserved.
 *  
 *  Contributor(s): Paul Byrne and Phil Dowell (PhilD).
 *                  
 **/
package org.jdesktop.lg3d.displayserver;

import java.awt.Graphics;
import java.awt.Dimension;
import org.jdesktop.lg3d.toolkit.NonLGJWindow;
import java.net.URL;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.Color;
import java.awt.MediaTracker;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.image.BufferedImage;

/**
 * A General purpose Splash Window for display while during
 * application startup.
 *
 * The window contains an image and can display text messages to mark
 * progress of application startup.
 *
 * @author  paulby
 * @version 
 */
public class SplashWindow extends NonLGJWindow {

    private static SplashWindow splashWindow = null;
    private SplashPanel panel = null;
    
    /** Creates new SplashWindow
     * @param imageResourceName is the name of the image file to display on
     * the splash screen in the form of a Java Resource
     */
    public SplashWindow( final String imageResourceName ) {
        initComponents ();
        
        URL imageURL = this.getClass().getClassLoader().getResource( imageResourceName );
        Image image = Toolkit.getDefaultToolkit().createImage( imageURL );
        
        Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();

        MediaTracker tracker = new MediaTracker( this );
        tracker.addImage( image, 1 );
        try {
            tracker.waitForAll();
        } catch(InterruptedException e ) {}
        
        panel = new SplashPanel( image );
        this.getContentPane().add( "Center", panel );
        pack ();
        
        Dimension windowDim = getPreferredSize();
        
        setLocation( screenDim.width/2 - windowDim.width/2, screenDim.height/2 - windowDim.height/2 );
        setAlwaysOnTop(true);
    }
    
    /** Creates and show a SplashWindow
     * @param imageResourceName is the name of the image file to display on
     * the splash screen in the form of a Java Resource
     */
    public static void showSplashscreen(final String imageResourceName ) {
        if (splashWindow==null)
            splashWindow = new SplashWindow( imageResourceName );

        splashWindow.setVisible( true );
    }
    
    /** 
     * Destroy any locally held resource and hide the window
     */
    public static void destroySplashscreen() {
        if (splashWindow!=null) {
            splashWindow.setVisible( false );
            splashWindow.dispose();
            splashWindow = null;
        }
    }
    
    /**
     * Show this message on the splash screen
     */
    public static void showMessage( final String message ) {
        if (splashWindow!=null)
            splashWindow.actualShowMessage( new String[] {message} );
    }
    
    /**
     * Show this message on the splash screen. Each element of the array
     * will appear on a different line. message[0] is rendered first and
     * subsequent messages are rendered below.
     */
    public static void showMessage( final String[] message ) {
        if (splashWindow!=null)
            splashWindow.actualShowMessage( message );
    }
    
    protected void actualShowMessage( final String[] message ) {
        panel.showMessage( message );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        }
        );
    }//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit (0);
    }//GEN-LAST:event_exitForm


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    class SplashPanel extends javax.swing.JPanel {
        private BufferedImage image;
        private BufferedImage messageImage = null;
        private String message[] = null;
        
        private int messageX = 30;
        private int messageY = 220;
        private int messageH = 20;
        private int messageW = 200;
        private int ascent;
        
        public SplashPanel( final Image im ) {
            int width = im.getWidth( null );
            int height = im.getHeight( null);
            
            image = new BufferedImage( width, height, BufferedImage.TYPE_INT_RGB );
            image.getGraphics().drawImage( im, 0, 0, null );
            
            
            Dimension d = new Dimension( width, height );
            setPreferredSize( d );
            setMinimumSize( d );
            
            Font font = new Font("SansSerif", Font.BOLD, 14);
            setFont(font);
            FontMetrics fm = getFontMetrics(font);
            ascent = fm.getMaxAscent();
            messageH = fm.getMaxDescent() + ascent;
            messageW = width - messageX;
            
            messageImage = image.getSubimage( messageX, messageY-ascent, messageW, messageH );
        }
        
        public void showMessage( final String[] message ) {
            this.message = message;
//            Graphics g = getGraphics();
//            g.drawImage( messageImage, messageX, messageY-ascent, null );
//            g.setColor(Color.GRAY);
//            g.drawString( message, messageX, messageY );
            repaint();
        }
        
        public void paint( Graphics g ) {
            int y=messageY;
            g.drawImage( image, 0, 0, null );
            g.setColor(Color.GRAY);
            if (message!=null) {
                for(int i=0; i<message.length; i++) {
                    g.drawString( message[i], messageX, y );
                    y += messageH;
                }
            }
        }
        
    }
}
